#!/usr/bin/env ruby

input_name = ARGV[0]
input_name = '/etc/dnsmasq.source' unless input_name
exit 1 unless File.file?(input_name)

def identify instance, fragment
  case fragment
  when /\A([0-9a-f]{2}:){5}[0-9a-f]{2}\Z/i # MAC
    instance[:mac] ||= []
    instance[:mac]  << fragment
  when /\A(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\Z/
    instance[:ipv4] ||= []
    instance[:ipv4]  << fragment
  when /port-\d{1,}\Z/i
    instance[:port] ||= []
    instance[:port]  << fragment
  when /\A[-a-z0-9]{1,}\Z/i
    instance[:name] ||= []
    instance[:name]  << fragment
  else
    raise "No matching regular expression was found for data fragment: #{fragment}!"
  end
  return instance
end

# INPUT

instances = []
File.readlines(input_name).each do |line|
  line.chomp!
  line.gsub!(/#.*\Z/, '')
  next if line.empty?

  instance = {}
  line.scan(/[^\s]{1,}/).each{ |fragment| instance = identify(instance, fragment) }

  instance[:name] = [ "inet-#{instance[:ipv4].first.tr('.', '-')}" ] if instance[:name].nil? # instance[:name].empty? 

  instances << instance
end

# OUTPUT

def banner io
  io.puts "# !! DO NOT EDIT THIS FILE DIRECTLY !!"
  io.puts "# !! EDIT /etc/dnsmasq.source, THEN !!"
  io.puts "# !! CALL /etc/dnsmasq-convert      !!"
  io.puts "#"
end

File.open('/etc/dnsmasq.dhcp.conf', 'w') do |output|
  banner(output)
  instances.each do |instance|
    output.puts '%s,%s,%s' % [ instance[:mac].join(','), instance[:ipv4].first, instance[:name].join(',') ]
  end
end

File.open('/etc/dnsmasq.hosts.conf', 'w') do |output|
  banner(output)
  instances.each do |instance|
    instance[:name].each do |name|
      output.write '%-18s %s%s' % [ instance[:ipv4], name, "\n" ]
    end
  end
end
